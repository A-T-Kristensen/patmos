-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_we0 : OUT STD_LOGIC;
    a_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.281000,HLS_SYN_LAT=15,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=205,HLS_SYN_LUT=516}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_fu_172_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_345 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond2_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_row_2_1_fu_198_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal a_row_2_7_fu_214_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_9_fu_222_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_236_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal a_row_2_3_fu_280_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_row_2_11_fu_296_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_16_fu_304_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_323_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal a_row_2_reg_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_reg_70 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_8_reg_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_94 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_row_2_2_reg_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_2_reg_117 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_15_reg_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_reg_139 : STD_LOGIC_VECTOR (1 downto 0);
    signal i2_reg_150 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast_fu_161_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_cast_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_329_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_row_2_5_fu_184_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_6_fu_206_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_242_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp1_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_row_2_18_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp4_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_row_2_4_fu_266_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_10_fu_288_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component matrixmul_mux_32_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    matrixmul_mux_32_bkb_U0 : component matrixmul_mux_32_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => a_row_2_15_reg_128,
        din2 => a_row_1_2_reg_117,
        din3 => a_row_2_2_reg_106,
        din4 => i1_reg_139,
        dout => tmp_fu_242_p5);

    matrixmul_mux_32_bkb_U1 : component matrixmul_mux_32_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => a_row_2_15_reg_128,
        din2 => a_row_1_2_reg_117,
        din3 => a_row_2_2_reg_106,
        din4 => i2_reg_150,
        dout => tmp_1_fu_329_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    a_row_1_2_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond2_fu_166_p2 = ap_const_lv1_0)))) then 
                a_row_1_2_reg_117 <= a_row_1_reg_70;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_230_p2))) then 
                a_row_1_2_reg_117 <= a_row_2_11_fu_296_p3;
            end if; 
        end if;
    end process;

    a_row_2_15_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond2_fu_166_p2 = ap_const_lv1_0)))) then 
                a_row_2_15_reg_128 <= a_row_2_8_reg_82;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_230_p2))) then 
                a_row_2_15_reg_128 <= a_row_2_16_fu_304_p3;
            end if; 
        end if;
    end process;

    a_row_2_2_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond2_fu_166_p2 = ap_const_lv1_0)))) then 
                a_row_2_2_reg_106 <= a_row_2_reg_58;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_230_p2))) then 
                a_row_2_2_reg_106 <= a_row_2_3_fu_280_p3;
            end if; 
        end if;
    end process;

    i1_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond2_fu_166_p2 = ap_const_lv1_0)))) then 
                i1_reg_139 <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_230_p2))) then 
                i1_reg_139 <= i_2_fu_236_p2;
            end if; 
        end if;
    end process;

    i2_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = exitcond1_fu_230_p2)))) then 
                i2_reg_150 <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond_fu_317_p2))) then 
                i2_reg_150 <= i_3_fu_323_p2;
            end if; 
        end if;
    end process;

    i_reg_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                i_reg_94 <= i_1_reg_345;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_94 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                a_row_1_reg_70 <= a_row_2_7_fu_214_p3;
                a_row_2_8_reg_82 <= a_row_2_9_fu_222_p3;
                a_row_2_reg_58 <= a_row_2_1_fu_198_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                i_1_reg_345 <= i_1_fu_172_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond2_fu_166_p2, exitcond1_fu_230_p2, exitcond_fu_317_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((exitcond2_fu_166_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_230_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (not((ap_const_lv1_0 = exitcond_fu_317_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, i_cast_fu_161_p1, i2_cast_fu_312_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            a_address0 <= i2_cast_fu_312_p1(16 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            a_address0 <= i_cast_fu_161_p1(16 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state5)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_d0 <= tmp_1_fu_329_p5;
    a_row_2_10_fu_288_p3 <= 
        a_row_2_18_fu_254_p2 when (sel_tmp1_fu_260_p2(0) = '1') else 
        a_row_1_2_reg_117;
    a_row_2_11_fu_296_p3 <= 
        a_row_1_2_reg_117 when (sel_tmp4_fu_274_p2(0) = '1') else 
        a_row_2_10_fu_288_p3;
    a_row_2_16_fu_304_p3 <= 
        a_row_2_18_fu_254_p2 when (sel_tmp4_fu_274_p2(0) = '1') else 
        a_row_2_15_reg_128;
    a_row_2_18_fu_254_p2 <= std_logic_vector(shift_left(unsigned(tmp_fu_242_p5),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    a_row_2_1_fu_198_p3 <= 
        a_row_2_reg_58 when (sel_tmp3_fu_192_p2(0) = '1') else 
        a_row_2_5_fu_184_p3;
    a_row_2_3_fu_280_p3 <= 
        a_row_2_2_reg_106 when (sel_tmp4_fu_274_p2(0) = '1') else 
        a_row_2_4_fu_266_p3;
    a_row_2_4_fu_266_p3 <= 
        a_row_2_2_reg_106 when (sel_tmp1_fu_260_p2(0) = '1') else 
        a_row_2_18_fu_254_p2;
    a_row_2_5_fu_184_p3 <= 
        a_row_2_reg_58 when (sel_tmp_fu_178_p2(0) = '1') else 
        a_q0;
    a_row_2_6_fu_206_p3 <= 
        a_q0 when (sel_tmp_fu_178_p2(0) = '1') else 
        a_row_1_reg_70;
    a_row_2_7_fu_214_p3 <= 
        a_row_1_reg_70 when (sel_tmp3_fu_192_p2(0) = '1') else 
        a_row_2_6_fu_206_p3;
    a_row_2_9_fu_222_p3 <= 
        a_q0 when (sel_tmp3_fu_192_p2(0) = '1') else 
        a_row_2_8_reg_82;

    a_we0_assign_proc : process(ap_CS_fsm_state5, exitcond_fu_317_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond_fu_317_p2)))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);

    ap_done_assign_proc : process(ap_CS_fsm_state5, exitcond_fu_317_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond_fu_317_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, exitcond_fu_317_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond_fu_317_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_230_p2 <= "1" when (i1_reg_139 = ap_const_lv2_3) else "0";
    exitcond2_fu_166_p2 <= "1" when (i_reg_94 = ap_const_lv2_3) else "0";
    exitcond_fu_317_p2 <= "1" when (i2_reg_150 = ap_const_lv2_3) else "0";
    i2_cast_fu_312_p1 <= std_logic_vector(resize(unsigned(i2_reg_150),32));
    i_1_fu_172_p2 <= std_logic_vector(unsigned(i_reg_94) + unsigned(ap_const_lv2_1));
    i_2_fu_236_p2 <= std_logic_vector(unsigned(i1_reg_139) + unsigned(ap_const_lv2_1));
    i_3_fu_323_p2 <= std_logic_vector(unsigned(i2_reg_150) + unsigned(ap_const_lv2_1));
    i_cast_fu_161_p1 <= std_logic_vector(resize(unsigned(i_reg_94),32));
    sel_tmp1_fu_260_p2 <= "1" when (i1_reg_139 = ap_const_lv2_1) else "0";
    sel_tmp3_fu_192_p2 <= "1" when (i_reg_94 = ap_const_lv2_0) else "0";
    sel_tmp4_fu_274_p2 <= "1" when (i1_reg_139 = ap_const_lv2_0) else "0";
    sel_tmp_fu_178_p2 <= "1" when (i_reg_94 = ap_const_lv2_1) else "0";
end behav;
