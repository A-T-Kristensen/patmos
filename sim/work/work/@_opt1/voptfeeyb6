library verilog;
use verilog.vl_types.all;
entity Decode is
    port(
        clk             : in     vl_logic;
        reset           : in     vl_logic;
        io_ena          : in     vl_logic;
        io_flush        : in     vl_logic;
        io_fedec_instr_a: in     vl_logic_vector(31 downto 0);
        io_fedec_instr_b: in     vl_logic_vector(31 downto 0);
        io_fedec_pc     : in     vl_logic_vector(29 downto 0);
        io_fedec_base   : in     vl_logic_vector(29 downto 0);
        io_fedec_reloc  : in     vl_logic_vector(31 downto 0);
        io_fedec_relPc  : in     vl_logic_vector(29 downto 0);
        io_decex_pc     : out    vl_logic_vector(29 downto 0);
        io_decex_base   : out    vl_logic_vector(29 downto 0);
        io_decex_relPc  : out    vl_logic_vector(29 downto 0);
        io_decex_pred_1 : out    vl_logic_vector(3 downto 0);
        io_decex_pred_0 : out    vl_logic_vector(3 downto 0);
        io_decex_aluOp_1_func: out    vl_logic_vector(3 downto 0);
        io_decex_aluOp_1_isMul: out    vl_logic;
        io_decex_aluOp_1_isCmp: out    vl_logic;
        io_decex_aluOp_1_isPred: out    vl_logic;
        io_decex_aluOp_1_isBCpy: out    vl_logic;
        io_decex_aluOp_1_isMTS: out    vl_logic;
        io_decex_aluOp_1_isMFS: out    vl_logic;
        io_decex_aluOp_0_func: out    vl_logic_vector(3 downto 0);
        io_decex_aluOp_0_isMul: out    vl_logic;
        io_decex_aluOp_0_isCmp: out    vl_logic;
        io_decex_aluOp_0_isPred: out    vl_logic;
        io_decex_aluOp_0_isBCpy: out    vl_logic;
        io_decex_aluOp_0_isMTS: out    vl_logic;
        io_decex_aluOp_0_isMFS: out    vl_logic;
        io_decex_predOp_1_func: out    vl_logic_vector(1 downto 0);
        io_decex_predOp_1_dest: out    vl_logic_vector(2 downto 0);
        io_decex_predOp_1_s1Addr: out    vl_logic_vector(3 downto 0);
        io_decex_predOp_1_s2Addr: out    vl_logic_vector(3 downto 0);
        io_decex_predOp_0_func: out    vl_logic_vector(1 downto 0);
        io_decex_predOp_0_dest: out    vl_logic_vector(2 downto 0);
        io_decex_predOp_0_s1Addr: out    vl_logic_vector(3 downto 0);
        io_decex_predOp_0_s2Addr: out    vl_logic_vector(3 downto 0);
        io_decex_jmpOp_branch: out    vl_logic;
        io_decex_jmpOp_target: out    vl_logic_vector(29 downto 0);
        io_decex_jmpOp_reloc: out    vl_logic_vector(31 downto 0);
        io_decex_memOp_load: out    vl_logic;
        io_decex_memOp_store: out    vl_logic;
        io_decex_memOp_hword: out    vl_logic;
        io_decex_memOp_byte: out    vl_logic;
        io_decex_memOp_zext: out    vl_logic;
        io_decex_memOp_typ: out    vl_logic_vector(1 downto 0);
        io_decex_stackOp: out    vl_logic_vector(2 downto 0);
        io_decex_rsAddr_3: out    vl_logic_vector(4 downto 0);
        io_decex_rsAddr_2: out    vl_logic_vector(4 downto 0);
        io_decex_rsAddr_1: out    vl_logic_vector(4 downto 0);
        io_decex_rsAddr_0: out    vl_logic_vector(4 downto 0);
        io_decex_rsData_3: out    vl_logic_vector(31 downto 0);
        io_decex_rsData_2: out    vl_logic_vector(31 downto 0);
        io_decex_rsData_1: out    vl_logic_vector(31 downto 0);
        io_decex_rsData_0: out    vl_logic_vector(31 downto 0);
        io_decex_rdAddr_1: out    vl_logic_vector(4 downto 0);
        io_decex_rdAddr_0: out    vl_logic_vector(4 downto 0);
        io_decex_immVal_1: out    vl_logic_vector(31 downto 0);
        io_decex_immVal_0: out    vl_logic_vector(31 downto 0);
        io_decex_immOp_1: out    vl_logic;
        io_decex_immOp_0: out    vl_logic;
        io_decex_wrRd_1 : out    vl_logic;
        io_decex_wrRd_0 : out    vl_logic;
        io_decex_callAddr: out    vl_logic_vector(31 downto 0);
        io_decex_call   : out    vl_logic;
        io_decex_ret    : out    vl_logic;
        io_decex_brcf   : out    vl_logic;
        io_decex_trap   : out    vl_logic;
        io_decex_xcall  : out    vl_logic;
        io_decex_xret   : out    vl_logic;
        io_decex_xsrc   : out    vl_logic_vector(4 downto 0);
        io_decex_nonDelayed: out    vl_logic;
        io_decex_illOp  : out    vl_logic;
        io_rfWrite_1_addr: in     vl_logic_vector(4 downto 0);
        io_rfWrite_1_data: in     vl_logic_vector(31 downto 0);
        io_rfWrite_1_valid: in     vl_logic;
        io_rfWrite_0_addr: in     vl_logic_vector(4 downto 0);
        io_rfWrite_0_data: in     vl_logic_vector(31 downto 0);
        io_rfWrite_0_valid: in     vl_logic;
        io_exc_exc      : in     vl_logic;
        io_exc_excBase  : in     vl_logic_vector(29 downto 0);
        io_exc_excAddr  : in     vl_logic_vector(29 downto 0);
        io_exc_intr     : in     vl_logic;
        io_exc_addr     : in     vl_logic_vector(31 downto 0);
        io_exc_src      : in     vl_logic_vector(4 downto 0);
        io_exc_local    : in     vl_logic
    );
end Decode;
