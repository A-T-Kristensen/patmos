-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_EN_A : OUT STD_LOGIC;
    a_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_Clk_A : OUT STD_LOGIC;
    a_Rst_A : OUT STD_LOGIC );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.021000,HLS_SYN_LAT=258,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=1234,HLS_SYN_LUT=2147}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv29_2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv29_3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000011";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_next_fu_280_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_next_reg_1255 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_1260 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast1_mid2_v_fu_298_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_cast1_mid2_v_reg_1265 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_306_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_reg_1271 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_fu_331_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_1283 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal a_row_0_reg_1308 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal a_row_1_reg_1318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal a_row_2_reg_1328 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_mid2_fu_381_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_mid2_reg_1333 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal a_row_3_reg_1348 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_397_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_1353 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal a_row_3_1_fu_444_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_3_1_reg_1369 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_1_fu_451_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_1_reg_1374 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_1_fu_458_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_1_reg_1379 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_0_1_fu_465_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_0_1_reg_1384 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_1389 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_1399 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_reg_1412 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_587_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1428 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_4_fu_755_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1438 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_5_fu_909_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_1448 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1049_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1453 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_751_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_1458 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_905_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_1_reg_1463 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_1045_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_2_reg_1468 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp7_fu_1086_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_reg_1473 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1082_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_3_reg_1478 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal j_1_fu_1127_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal indvar_flatten_reg_240 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_251 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_262 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_314_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_344_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_358_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_372_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_388_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_cast_fu_434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_652_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_cast_fu_809_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_cast_fu_1112_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_0_2_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_2_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_2_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_3_2_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_11_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_18_fu_580_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_8_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_17_fu_573_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_12_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_16_fu_566_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_1_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_3_fu_559_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_11_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_18_fu_744_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_8_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_17_fu_737_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_12_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_16_fu_730_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_1_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_3_fu_723_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_11_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_18_fu_898_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_8_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_17_fu_891_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_12_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_16_fu_884_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_1_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_3_fu_877_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_11_fu_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_18_fu_1038_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_8_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_17_fu_1031_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_12_fu_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_16_fu_1024_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_1_fu_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_3_fu_1017_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_286_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid1_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_339_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_353_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_fu_367_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_cast_cast_fu_425_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_fu_428_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_copy_0_3_fu_477_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_4_fu_490_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_5_fu_511_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_6_fu_519_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_9_fu_535_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_2_fu_503_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_7_fu_527_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_14_fu_543_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_15_fu_551_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_587_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_587_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_587_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_587_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_fu_660_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_4_fu_667_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_5_fu_681_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_6_fu_688_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_9_fu_702_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_2_fu_674_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_7_fu_695_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_14_fu_709_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_15_fu_716_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_755_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_755_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_755_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_755_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_cast5_fu_800_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_19_fu_803_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_copy_2_3_fu_814_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_4_fu_821_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_5_fu_835_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_6_fu_842_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_9_fu_856_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_2_fu_828_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_7_fu_849_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_14_fu_863_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_15_fu_870_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_909_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_909_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_909_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_909_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_fu_954_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_4_fu_961_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_5_fu_975_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_6_fu_982_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_9_fu_996_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_2_fu_968_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_7_fu_989_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_14_fu_1003_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_15_fu_1010_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1049_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1049_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1049_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1049_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_15_fu_1090_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_cast_fu_1099_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_cast_cast6_fu_1103_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_fu_1106_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp8_fu_1117_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component matrixmul_mux_42_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmul_mul_32scud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    matrixmul_mux_42_bkb_U0 : component matrixmul_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_2_fu_587_p1,
        din2 => tmp_2_fu_587_p2,
        din3 => tmp_2_fu_587_p3,
        din4 => tmp_2_fu_587_p4,
        din5 => tmp_reg_1353,
        dout => tmp_2_fu_587_p6);

    matrixmul_mul_32scud_U1 : component matrixmul_mul_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_0_1_reg_1384,
        din1 => tmp_2_reg_1428,
        ce => ap_const_logic_1,
        dout => grp_fu_751_p2);

    matrixmul_mux_42_bkb_U2 : component matrixmul_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_4_fu_755_p1,
        din2 => tmp_4_fu_755_p2,
        din3 => tmp_4_fu_755_p3,
        din4 => tmp_4_fu_755_p4,
        din5 => tmp_reg_1353,
        dout => tmp_4_fu_755_p6);

    matrixmul_mul_32scud_U3 : component matrixmul_mul_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_1_1_reg_1379,
        din1 => tmp_4_reg_1438,
        ce => ap_const_logic_1,
        dout => grp_fu_905_p2);

    matrixmul_mux_42_bkb_U4 : component matrixmul_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_5_fu_909_p1,
        din2 => tmp_5_fu_909_p2,
        din3 => tmp_5_fu_909_p3,
        din4 => tmp_5_fu_909_p4,
        din5 => tmp_reg_1353,
        dout => tmp_5_fu_909_p6);

    matrixmul_mul_32scud_U5 : component matrixmul_mul_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_2_1_reg_1374,
        din1 => tmp_5_reg_1448,
        ce => ap_const_logic_1,
        dout => grp_fu_1045_p2);

    matrixmul_mux_42_bkb_U6 : component matrixmul_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_6_fu_1049_p1,
        din2 => tmp_6_fu_1049_p2,
        din3 => tmp_6_fu_1049_p3,
        din4 => tmp_6_fu_1049_p4,
        din5 => tmp_reg_1353,
        dout => tmp_6_fu_1049_p6);

    matrixmul_mul_32scud_U7 : component matrixmul_mul_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_3_1_reg_1369,
        din1 => tmp_6_reg_1453,
        ce => ap_const_logic_1,
        dout => grp_fu_1082_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
                i_reg_251 <= i_cast1_mid2_v_reg_1265;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_251 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
                indvar_flatten_reg_240 <= indvar_flatten_next_reg_1255;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_240 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
                j_reg_262 <= j_1_fu_1127_p2;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_262 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then
                a_row_0_1_reg_1384 <= a_row_0_1_fu_465_p3;
                a_row_0_2_fu_84 <= a_row_0_1_fu_465_p3;
                a_row_1_1_reg_1379 <= a_row_1_1_fu_458_p3;
                a_row_1_2_fu_88 <= a_row_1_1_fu_458_p3;
                a_row_2_1_reg_1374 <= a_row_2_1_fu_451_p3;
                a_row_2_2_fu_92 <= a_row_2_1_fu_451_p3;
                a_row_3_1_reg_1369 <= a_row_3_1_fu_444_p3;
                a_row_3_2_fu_96 <= a_row_3_1_fu_444_p3;
                b_copy_0_3_11_fu_100 <= b_copy_0_3_18_fu_580_p3;
                b_copy_0_3_12_fu_108 <= b_copy_0_3_16_fu_566_p3;
                b_copy_0_3_1_fu_112 <= b_copy_0_3_3_fu_559_p3;
                b_copy_0_3_8_fu_104 <= b_copy_0_3_17_fu_573_p3;
                sel_tmp2_reg_1399 <= sel_tmp2_fu_485_p2;
                sel_tmp4_reg_1412 <= sel_tmp4_fu_498_p2;
                sel_tmp_reg_1389 <= sel_tmp_fu_472_p2;
                tmp_2_reg_1428 <= tmp_2_fu_587_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                a_row_0_reg_1308 <= a_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                a_row_1_reg_1318 <= a_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                a_row_2_reg_1328 <= a_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then
                a_row_3_reg_1348 <= a_Dout_A;
                j_mid2_reg_1333 <= j_mid2_fu_381_p3;
                tmp_reg_1353 <= tmp_fu_397_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then
                b_copy_1_3_11_fu_116 <= b_copy_1_3_18_fu_744_p3;
                b_copy_1_3_12_fu_124 <= b_copy_1_3_16_fu_730_p3;
                b_copy_1_3_1_fu_128 <= b_copy_1_3_3_fu_723_p3;
                b_copy_1_3_8_fu_120 <= b_copy_1_3_17_fu_737_p3;
                tmp_4_reg_1438 <= tmp_4_fu_755_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                b_copy_2_3_11_fu_132 <= b_copy_2_3_18_fu_898_p3;
                b_copy_2_3_12_fu_140 <= b_copy_2_3_16_fu_884_p3;
                b_copy_2_3_1_fu_144 <= b_copy_2_3_3_fu_877_p3;
                b_copy_2_3_8_fu_136 <= b_copy_2_3_17_fu_891_p3;
                tmp_5_reg_1448 <= tmp_5_fu_909_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                b_copy_3_3_11_fu_148 <= b_copy_3_3_18_fu_1038_p3;
                b_copy_3_3_12_fu_156 <= b_copy_3_3_16_fu_1024_p3;
                b_copy_3_3_1_fu_160 <= b_copy_3_3_3_fu_1017_p3;
                b_copy_3_3_8_fu_152 <= b_copy_3_3_17_fu_1031_p3;
                tmp_6_reg_1453 <= tmp_6_fu_1049_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond_flatten_fu_274_p2 = ap_const_lv1_0))) then
                exitcond_reg_1260 <= exitcond_fu_292_p2;
                i_cast1_mid2_v_reg_1265 <= i_cast1_mid2_v_fu_298_p3;
                    tmp_7_reg_1271(4 downto 2) <= tmp_7_fu_306_p3(4 downto 2);
                tmp_mid2_reg_1283 <= tmp_mid2_fu_331_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                indvar_flatten_next_reg_1255 <= indvar_flatten_next_fu_280_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then
                tmp7_reg_1473 <= tmp7_fu_1086_p2;
                tmp_9_2_reg_1468 <= grp_fu_1045_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state14))) then
                tmp_9_1_reg_1463 <= grp_fu_905_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then
                tmp_9_3_reg_1478 <= grp_fu_1082_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then
                tmp_9_reg_1458 <= grp_fu_751_p2;
            end if;
        end if;
    end process;
    tmp_7_reg_1271(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_274_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((exitcond_flatten_fu_274_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_Addr_A <= std_logic_vector(shift_left(unsigned(a_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_Addr_A_orig_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state17, tmp_8_fu_314_p1, tmp_10_fu_344_p3, tmp_12_fu_358_p3, tmp_14_fu_372_p3, tmp_16_fu_388_p3, tmp_19_cast_fu_434_p1, tmp_18_fu_652_p3, tmp_21_cast_fu_809_p1, tmp_22_cast_fu_1112_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            a_Addr_A_orig <= tmp_22_cast_fu_1112_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            a_Addr_A_orig <= tmp_21_cast_fu_809_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            a_Addr_A_orig <= tmp_18_fu_652_p3;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            a_Addr_A_orig <= tmp_19_cast_fu_434_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            a_Addr_A_orig <= tmp_16_fu_388_p3;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            a_Addr_A_orig <= tmp_14_fu_372_p3;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            a_Addr_A_orig <= tmp_12_fu_358_p3;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            a_Addr_A_orig <= tmp_10_fu_344_p3;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            a_Addr_A_orig <= tmp_8_fu_314_p1;
        else 
            a_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_Clk_A <= ap_clk;
    a_Din_A <= std_logic_vector(unsigned(tmp7_reg_1473) + unsigned(tmp8_fu_1117_p2));

    a_EN_A_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state17)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)))) then 
            a_EN_A <= ap_const_logic_1;
        else 
            a_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_Rst_A <= ap_rst;

    a_WEN_A_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state17)))) then 
            a_WEN_A <= ap_const_lv4_F;
        else 
            a_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    a_row_0_1_fu_465_p3 <= 
        a_row_0_reg_1308 when (tmp_3_fu_439_p2(0) = '1') else 
        a_row_0_2_fu_84;
    a_row_1_1_fu_458_p3 <= 
        a_row_1_reg_1318 when (tmp_3_fu_439_p2(0) = '1') else 
        a_row_1_2_fu_88;
    a_row_2_1_fu_451_p3 <= 
        a_row_2_reg_1328 when (tmp_3_fu_439_p2(0) = '1') else 
        a_row_2_2_fu_92;
    a_row_3_1_fu_444_p3 <= 
        a_row_3_reg_1348 when (tmp_3_fu_439_p2(0) = '1') else 
        a_row_3_2_fu_96;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_CS_fsm_state18)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_copy_0_3_14_fu_543_p3 <= 
        b_copy_0_3_8_fu_104 when (sel_tmp4_fu_498_p2(0) = '1') else 
        b_copy_0_3_9_fu_535_p3;
    b_copy_0_3_15_fu_551_p3 <= 
        a_Dout_A when (sel_tmp4_fu_498_p2(0) = '1') else 
        b_copy_0_3_11_fu_100;
    b_copy_0_3_16_fu_566_p3 <= 
        b_copy_0_3_7_fu_527_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_0_3_12_fu_108;
    b_copy_0_3_17_fu_573_p3 <= 
        b_copy_0_3_14_fu_543_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_0_3_8_fu_104;
    b_copy_0_3_18_fu_580_p3 <= 
        b_copy_0_3_15_fu_551_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_0_3_11_fu_100;
    b_copy_0_3_2_fu_503_p3 <= 
        b_copy_0_3_1_fu_112 when (sel_tmp4_fu_498_p2(0) = '1') else 
        b_copy_0_3_4_fu_490_p3;
    b_copy_0_3_3_fu_559_p3 <= 
        b_copy_0_3_2_fu_503_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_0_3_1_fu_112;
    b_copy_0_3_4_fu_490_p3 <= 
        b_copy_0_3_1_fu_112 when (sel_tmp2_fu_485_p2(0) = '1') else 
        b_copy_0_3_fu_477_p3;
    b_copy_0_3_5_fu_511_p3 <= 
        a_Dout_A when (sel_tmp_fu_472_p2(0) = '1') else 
        b_copy_0_3_12_fu_108;
    b_copy_0_3_6_fu_519_p3 <= 
        b_copy_0_3_12_fu_108 when (sel_tmp2_fu_485_p2(0) = '1') else 
        b_copy_0_3_5_fu_511_p3;
    b_copy_0_3_7_fu_527_p3 <= 
        b_copy_0_3_12_fu_108 when (sel_tmp4_fu_498_p2(0) = '1') else 
        b_copy_0_3_6_fu_519_p3;
    b_copy_0_3_9_fu_535_p3 <= 
        a_Dout_A when (sel_tmp2_fu_485_p2(0) = '1') else 
        b_copy_0_3_8_fu_104;
    b_copy_0_3_fu_477_p3 <= 
        b_copy_0_3_1_fu_112 when (sel_tmp_fu_472_p2(0) = '1') else 
        a_Dout_A;
    b_copy_1_3_14_fu_709_p3 <= 
        b_copy_1_3_8_fu_120 when (sel_tmp4_reg_1412(0) = '1') else 
        b_copy_1_3_9_fu_702_p3;
    b_copy_1_3_15_fu_716_p3 <= 
        a_Dout_A when (sel_tmp4_reg_1412(0) = '1') else 
        b_copy_1_3_11_fu_116;
    b_copy_1_3_16_fu_730_p3 <= 
        b_copy_1_3_7_fu_695_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_1_3_12_fu_124;
    b_copy_1_3_17_fu_737_p3 <= 
        b_copy_1_3_14_fu_709_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_1_3_8_fu_120;
    b_copy_1_3_18_fu_744_p3 <= 
        b_copy_1_3_15_fu_716_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_1_3_11_fu_116;
    b_copy_1_3_2_fu_674_p3 <= 
        b_copy_1_3_1_fu_128 when (sel_tmp4_reg_1412(0) = '1') else 
        b_copy_1_3_4_fu_667_p3;
    b_copy_1_3_3_fu_723_p3 <= 
        b_copy_1_3_2_fu_674_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_1_3_1_fu_128;
    b_copy_1_3_4_fu_667_p3 <= 
        b_copy_1_3_1_fu_128 when (sel_tmp2_reg_1399(0) = '1') else 
        b_copy_1_3_fu_660_p3;
    b_copy_1_3_5_fu_681_p3 <= 
        a_Dout_A when (sel_tmp_reg_1389(0) = '1') else 
        b_copy_1_3_12_fu_124;
    b_copy_1_3_6_fu_688_p3 <= 
        b_copy_1_3_12_fu_124 when (sel_tmp2_reg_1399(0) = '1') else 
        b_copy_1_3_5_fu_681_p3;
    b_copy_1_3_7_fu_695_p3 <= 
        b_copy_1_3_12_fu_124 when (sel_tmp4_reg_1412(0) = '1') else 
        b_copy_1_3_6_fu_688_p3;
    b_copy_1_3_9_fu_702_p3 <= 
        a_Dout_A when (sel_tmp2_reg_1399(0) = '1') else 
        b_copy_1_3_8_fu_120;
    b_copy_1_3_fu_660_p3 <= 
        b_copy_1_3_1_fu_128 when (sel_tmp_reg_1389(0) = '1') else 
        a_Dout_A;
    b_copy_2_3_14_fu_863_p3 <= 
        b_copy_2_3_8_fu_136 when (sel_tmp4_reg_1412(0) = '1') else 
        b_copy_2_3_9_fu_856_p3;
    b_copy_2_3_15_fu_870_p3 <= 
        a_Dout_A when (sel_tmp4_reg_1412(0) = '1') else 
        b_copy_2_3_11_fu_132;
    b_copy_2_3_16_fu_884_p3 <= 
        b_copy_2_3_7_fu_849_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_2_3_12_fu_140;
    b_copy_2_3_17_fu_891_p3 <= 
        b_copy_2_3_14_fu_863_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_2_3_8_fu_136;
    b_copy_2_3_18_fu_898_p3 <= 
        b_copy_2_3_15_fu_870_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_2_3_11_fu_132;
    b_copy_2_3_2_fu_828_p3 <= 
        b_copy_2_3_1_fu_144 when (sel_tmp4_reg_1412(0) = '1') else 
        b_copy_2_3_4_fu_821_p3;
    b_copy_2_3_3_fu_877_p3 <= 
        b_copy_2_3_2_fu_828_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_2_3_1_fu_144;
    b_copy_2_3_4_fu_821_p3 <= 
        b_copy_2_3_1_fu_144 when (sel_tmp2_reg_1399(0) = '1') else 
        b_copy_2_3_fu_814_p3;
    b_copy_2_3_5_fu_835_p3 <= 
        a_Dout_A when (sel_tmp_reg_1389(0) = '1') else 
        b_copy_2_3_12_fu_140;
    b_copy_2_3_6_fu_842_p3 <= 
        b_copy_2_3_12_fu_140 when (sel_tmp2_reg_1399(0) = '1') else 
        b_copy_2_3_5_fu_835_p3;
    b_copy_2_3_7_fu_849_p3 <= 
        b_copy_2_3_12_fu_140 when (sel_tmp4_reg_1412(0) = '1') else 
        b_copy_2_3_6_fu_842_p3;
    b_copy_2_3_9_fu_856_p3 <= 
        a_Dout_A when (sel_tmp2_reg_1399(0) = '1') else 
        b_copy_2_3_8_fu_136;
    b_copy_2_3_fu_814_p3 <= 
        b_copy_2_3_1_fu_144 when (sel_tmp_reg_1389(0) = '1') else 
        a_Dout_A;
    b_copy_3_3_14_fu_1003_p3 <= 
        b_copy_3_3_8_fu_152 when (sel_tmp4_reg_1412(0) = '1') else 
        b_copy_3_3_9_fu_996_p3;
    b_copy_3_3_15_fu_1010_p3 <= 
        a_Dout_A when (sel_tmp4_reg_1412(0) = '1') else 
        b_copy_3_3_11_fu_148;
    b_copy_3_3_16_fu_1024_p3 <= 
        b_copy_3_3_7_fu_989_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_3_3_12_fu_156;
    b_copy_3_3_17_fu_1031_p3 <= 
        b_copy_3_3_14_fu_1003_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_3_3_8_fu_152;
    b_copy_3_3_18_fu_1038_p3 <= 
        b_copy_3_3_15_fu_1010_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_3_3_11_fu_148;
    b_copy_3_3_2_fu_968_p3 <= 
        b_copy_3_3_1_fu_160 when (sel_tmp4_reg_1412(0) = '1') else 
        b_copy_3_3_4_fu_961_p3;
    b_copy_3_3_3_fu_1017_p3 <= 
        b_copy_3_3_2_fu_968_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_3_3_1_fu_160;
    b_copy_3_3_4_fu_961_p3 <= 
        b_copy_3_3_1_fu_160 when (sel_tmp2_reg_1399(0) = '1') else 
        b_copy_3_3_fu_954_p3;
    b_copy_3_3_5_fu_975_p3 <= 
        a_Dout_A when (sel_tmp_reg_1389(0) = '1') else 
        b_copy_3_3_12_fu_156;
    b_copy_3_3_6_fu_982_p3 <= 
        b_copy_3_3_12_fu_156 when (sel_tmp2_reg_1399(0) = '1') else 
        b_copy_3_3_5_fu_975_p3;
    b_copy_3_3_7_fu_989_p3 <= 
        b_copy_3_3_12_fu_156 when (sel_tmp4_reg_1412(0) = '1') else 
        b_copy_3_3_6_fu_982_p3;
    b_copy_3_3_9_fu_996_p3 <= 
        a_Dout_A when (sel_tmp2_reg_1399(0) = '1') else 
        b_copy_3_3_8_fu_152;
    b_copy_3_3_fu_954_p3 <= 
        b_copy_3_3_1_fu_160 when (sel_tmp_reg_1389(0) = '1') else 
        a_Dout_A;
    exitcond_flatten_fu_274_p2 <= "1" when (indvar_flatten_reg_240 = ap_const_lv5_10) else "0";
    exitcond_fu_292_p2 <= "1" when (j_reg_262 = ap_const_lv3_4) else "0";
    i_1_fu_286_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(i_reg_251));
    i_cast1_mid2_v_fu_298_p3 <= 
        i_1_fu_286_p2 when (exitcond_fu_292_p2(0) = '1') else 
        i_reg_251;
    indvar_flatten_next_fu_280_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_240) + unsigned(ap_const_lv5_1));
    j_1_fu_1127_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(j_mid2_reg_1333));
    j_cast_cast5_fu_800_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1333),6));
    j_cast_cast6_fu_1103_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1333),7));
    j_cast_cast_fu_425_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1333),5));
    j_mid2_fu_381_p3 <= 
        ap_const_lv3_0 when (exitcond_reg_1260(0) = '1') else 
        j_reg_262;
    sel_tmp2_fu_485_p2 <= "1" when (tmp_reg_1353 = ap_const_lv2_1) else "0";
    sel_tmp4_fu_498_p2 <= "1" when (tmp_reg_1353 = ap_const_lv2_0) else "0";
    sel_tmp_fu_472_p2 <= "1" when (tmp_reg_1353 = ap_const_lv2_2) else "0";
    tmp1_fu_325_p2 <= "1" when (i_reg_251 = ap_const_lv3_0) else "0";
    tmp7_fu_1086_p2 <= std_logic_vector(unsigned(tmp_9_reg_1458) + unsigned(tmp_9_1_reg_1463));
    tmp8_fu_1117_p2 <= std_logic_vector(unsigned(tmp_9_3_reg_1478) + unsigned(tmp_9_2_reg_1468));
    tmp_10_fu_344_p3 <= (ap_const_lv27_0 & tmp_s_fu_339_p2);
    tmp_11_fu_353_p2 <= (tmp_7_reg_1271 or ap_const_lv5_2);
    tmp_12_fu_358_p3 <= (ap_const_lv27_0 & tmp_11_fu_353_p2);
    tmp_13_fu_367_p2 <= (tmp_7_reg_1271 or ap_const_lv5_3);
    tmp_14_fu_372_p3 <= (ap_const_lv27_0 & tmp_13_fu_367_p2);
    tmp_15_fu_1090_p4 <= ((ap_const_lv1_1 & i_cast1_mid2_v_reg_1265) & ap_const_lv2_0);
    tmp_16_fu_388_p3 <= (ap_const_lv29_2 & j_mid2_fu_381_p3);
    tmp_17_cast_fu_1099_p1 <= std_logic_vector(resize(unsigned(tmp_15_fu_1090_p4),7));
    tmp_17_fu_428_p2 <= std_logic_vector(signed(ap_const_lv5_14) + signed(j_cast_cast_fu_425_p1));
    tmp_18_fu_652_p3 <= (ap_const_lv29_3 & j_mid2_reg_1333);
    tmp_19_cast_fu_434_p1 <= std_logic_vector(resize(unsigned(tmp_17_fu_428_p2),32));
    tmp_19_fu_803_p2 <= std_logic_vector(unsigned(ap_const_lv6_1C) + unsigned(j_cast_cast5_fu_800_p1));
    tmp_20_fu_1106_p2 <= std_logic_vector(unsigned(tmp_17_cast_fu_1099_p1) + unsigned(j_cast_cast6_fu_1103_p1));
    tmp_21_cast_fu_809_p1 <= std_logic_vector(resize(unsigned(tmp_19_fu_803_p2),32));
    tmp_22_cast_fu_1112_p1 <= std_logic_vector(resize(unsigned(tmp_20_fu_1106_p2),32));
    tmp_2_fu_587_p1 <= 
        b_copy_0_3_15_fu_551_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_0_3_11_fu_100;
    tmp_2_fu_587_p2 <= 
        b_copy_0_3_14_fu_543_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_0_3_8_fu_104;
    tmp_2_fu_587_p3 <= 
        b_copy_0_3_7_fu_527_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_0_3_12_fu_108;
    tmp_2_fu_587_p4 <= 
        b_copy_0_3_2_fu_503_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_0_3_1_fu_112;
    tmp_3_fu_439_p2 <= "1" when (j_mid2_reg_1333 = ap_const_lv3_0) else "0";
    tmp_4_fu_755_p1 <= 
        b_copy_1_3_15_fu_716_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_1_3_11_fu_116;
    tmp_4_fu_755_p2 <= 
        b_copy_1_3_14_fu_709_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_1_3_8_fu_120;
    tmp_4_fu_755_p3 <= 
        b_copy_1_3_7_fu_695_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_1_3_12_fu_124;
    tmp_4_fu_755_p4 <= 
        b_copy_1_3_2_fu_674_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_1_3_1_fu_128;
    tmp_5_fu_909_p1 <= 
        b_copy_2_3_15_fu_870_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_2_3_11_fu_132;
    tmp_5_fu_909_p2 <= 
        b_copy_2_3_14_fu_863_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_2_3_8_fu_136;
    tmp_5_fu_909_p3 <= 
        b_copy_2_3_7_fu_849_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_2_3_12_fu_140;
    tmp_5_fu_909_p4 <= 
        b_copy_2_3_2_fu_828_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_2_3_1_fu_144;
    tmp_6_fu_1049_p1 <= 
        b_copy_3_3_15_fu_1010_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_3_3_11_fu_148;
    tmp_6_fu_1049_p2 <= 
        b_copy_3_3_14_fu_1003_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_3_3_8_fu_152;
    tmp_6_fu_1049_p3 <= 
        b_copy_3_3_7_fu_989_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_3_3_12_fu_156;
    tmp_6_fu_1049_p4 <= 
        b_copy_3_3_2_fu_968_p3 when (tmp_mid2_reg_1283(0) = '1') else 
        b_copy_3_3_1_fu_160;
    tmp_7_fu_306_p3 <= (i_cast1_mid2_v_fu_298_p3 & ap_const_lv2_0);
    tmp_8_fu_314_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_306_p3),32));
    tmp_fu_397_p1 <= j_mid2_fu_381_p3(2 - 1 downto 0);
    tmp_mid1_fu_319_p2 <= "1" when (i_1_fu_286_p2 = ap_const_lv3_0) else "0";
    tmp_mid2_fu_331_p3 <= 
        tmp_mid1_fu_319_p2 when (exitcond_fu_292_p2(0) = '1') else 
        tmp1_fu_325_p2;
    tmp_s_fu_339_p2 <= (tmp_7_reg_1271 or ap_const_lv5_1);
end behav;
