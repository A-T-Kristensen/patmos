-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_0_EN_A : OUT STD_LOGIC;
    a_0_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_0_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_0_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_0_Clk_A : OUT STD_LOGIC;
    a_0_Rst_A : OUT STD_LOGIC;
    a_1_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_1_EN_A : OUT STD_LOGIC;
    a_1_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_1_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_1_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_1_Clk_A : OUT STD_LOGIC;
    a_1_Rst_A : OUT STD_LOGIC );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.050000,HLS_SYN_LAT=106,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=1265,HLS_SYN_LUT=2180}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv29_2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_248 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_259 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_270 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_flatten_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1254 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1254 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1254 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_287_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_next_reg_1258 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal j_mid2_fu_305_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_mid2_reg_1263 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter1_j_mid2_reg_1263 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter2_j_mid2_reg_1263 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_cast1_mid2_v_fu_313_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_cast1_mid2_v_reg_1273 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter1_i_cast1_mid2_v_reg_1273 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_321_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_reg_1279 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_fu_346_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_1291 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_359_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_1316 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal a_row_0_reg_1337 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_19_reg_1342 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal a_row_1_reg_1355 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_19_reg_1360 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal tmp_3_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1373 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_row_2_reg_1381 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_1386 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_1396 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_reg_1409 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_547_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_1425 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal a_row_3_1_fu_612_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_3_1_reg_1435 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_1_fu_619_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_1_fu_625_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_1_reg_1445 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_0_1_fu_631_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_0_1_reg_1450 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_729_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1455 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal tmp_2_fu_899_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1465 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_916_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_1470 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_1048_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1475 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_724_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_2_reg_1485 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_912_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_3_reg_1490 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1044_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_1495 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1094_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_1_reg_1500 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_3_fu_1106_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_3_reg_1505 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal indvar_flatten_phi_fu_252_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_phi_fu_263_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_phi_fu_274_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_fu_354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_368_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_cast_fu_386_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_396_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_422_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_604_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_cast_fu_803_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_cast_fu_1129_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_0_2_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_2_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_2_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_3_2_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_11_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_18_fu_892_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_8_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_17_fu_885_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_12_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_16_fu_878_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_1_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_3_fu_871_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_11_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_18_fu_1037_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_8_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_17_fu_1030_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_12_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_16_fu_1023_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_1_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_3_fu_1016_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_11_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_18_fu_540_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_8_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_17_fu_533_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_12_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_16_fu_526_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_1_fu_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_3_fu_519_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_11_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_18_fu_717_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_8_fu_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_17_fu_710_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_12_fu_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_16_fu_703_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_1_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_3_fu_696_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_0_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_293_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid1_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_363_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_cast_cast5_fu_377_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_18_fu_380_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_391_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_fu_417_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_copy_2_3_fu_451_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_4_fu_458_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_5_fu_474_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_6_fu_481_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_9_fu_497_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_2_fu_466_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_7_fu_489_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_14_fu_504_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_15_fu_512_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_547_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_547_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_547_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_547_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_fu_637_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_4_fu_643_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_5_fu_657_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_6_fu_663_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_9_fu_677_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_2_fu_650_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_7_fu_670_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_14_fu_683_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_15_fu_690_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_724_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_729_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_729_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_729_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_729_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_cast_fu_794_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_fu_797_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_copy_0_3_fu_808_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_4_fu_815_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_5_fu_829_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_6_fu_836_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_9_fu_850_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_2_fu_822_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_7_fu_843_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_14_fu_857_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_15_fu_864_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_899_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_899_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_899_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_899_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_fu_953_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_4_fu_960_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_5_fu_974_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_6_fu_981_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_9_fu_995_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_2_fu_967_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_7_fu_988_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_14_fu_1002_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_15_fu_1009_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1048_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1048_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1048_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1048_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1088_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp7_fu_1098_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_fu_1102_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1088_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_15_fu_1112_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_cast_cast6_fu_1120_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_19_fu_1123_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component matrixmul_mux_42_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmul_mul_32scud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmul_urem_4ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    matrixmul_mux_42_bkb_U0 : component matrixmul_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_5_fu_547_p1,
        din2 => tmp_5_fu_547_p2,
        din3 => tmp_5_fu_547_p3,
        din4 => tmp_5_fu_547_p4,
        din5 => tmp_reg_1316,
        dout => tmp_5_fu_547_p6);

    matrixmul_mul_32scud_U1 : component matrixmul_mul_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_724_p0,
        din1 => tmp_5_reg_1425,
        ce => ap_const_logic_1,
        dout => grp_fu_724_p2);

    matrixmul_mux_42_bkb_U2 : component matrixmul_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_6_fu_729_p1,
        din2 => tmp_6_fu_729_p2,
        din3 => tmp_6_fu_729_p3,
        din4 => tmp_6_fu_729_p4,
        din5 => tmp_reg_1316,
        dout => tmp_6_fu_729_p6);

    matrixmul_mux_42_bkb_U3 : component matrixmul_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_2_fu_899_p1,
        din2 => tmp_2_fu_899_p2,
        din3 => tmp_2_fu_899_p3,
        din4 => tmp_2_fu_899_p4,
        din5 => tmp_reg_1316,
        dout => tmp_2_fu_899_p6);

    matrixmul_mul_32scud_U4 : component matrixmul_mul_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_3_1_reg_1435,
        din1 => tmp_6_reg_1455,
        ce => ap_const_logic_1,
        dout => grp_fu_912_p2);

    matrixmul_mul_32scud_U5 : component matrixmul_mul_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_0_1_reg_1450,
        din1 => tmp_2_reg_1465,
        ce => ap_const_logic_1,
        dout => grp_fu_1044_p2);

    matrixmul_mux_42_bkb_U6 : component matrixmul_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_4_fu_1048_p1,
        din2 => tmp_4_fu_1048_p2,
        din3 => tmp_4_fu_1048_p3,
        din4 => tmp_4_fu_1048_p4,
        din5 => tmp_reg_1316,
        dout => tmp_4_fu_1048_p6);

    matrixmul_urem_4ndEe_U7 : component matrixmul_urem_4ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1088_p0,
        din1 => ap_const_lv4_6,
        ce => ap_const_logic_1,
        dout => grp_fu_1088_p2);

    matrixmul_mul_32scud_U8 : component matrixmul_mul_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_1_1_reg_1445,
        din1 => tmp_4_reg_1475,
        ce => ap_const_logic_1,
        dout => grp_fu_1094_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((exitcond_flatten_fu_281_p2 = ap_const_lv1_0)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((exitcond_flatten_reg_1254 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5) and not((exitcond_flatten_reg_1254 = ap_const_lv1_0))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1254 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                i_reg_259 <= i_cast1_mid2_v_reg_1273;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_259 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1254 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                indvar_flatten_reg_248 <= indvar_flatten_next_reg_1258;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_248 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1254 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                j_reg_270 <= j_1_reg_1470;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_270 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1254 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4))) then
                a_row_0_1_reg_1450 <= a_row_0_1_fu_631_p3;
                a_row_1_1_reg_1445 <= a_row_1_1_fu_625_p3;
                a_row_3_1_reg_1435 <= a_row_3_1_fu_612_p3;
                tmp_6_reg_1455 <= tmp_6_fu_729_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1254 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4))) then
                a_row_0_2_fu_88 <= a_row_0_1_fu_631_p3;
                a_row_1_2_fu_92 <= a_row_1_1_fu_625_p3;
                a_row_2_2_fu_96 <= a_row_2_1_fu_619_p3;
                a_row_3_2_fu_100 <= a_row_3_1_fu_612_p3;
                b_copy_3_3_11_fu_152 <= b_copy_3_3_18_fu_717_p3;
                b_copy_3_3_12_fu_160 <= b_copy_3_3_16_fu_703_p3;
                b_copy_3_3_1_fu_164 <= b_copy_3_3_3_fu_696_p3;
                b_copy_3_3_8_fu_156 <= b_copy_3_3_17_fu_710_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1254 = ap_const_lv1_0))) then
                a_row_0_reg_1337 <= a_0_Dout_A;
                b_copy_2_3_19_reg_1342 <= a_1_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1254 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then
                a_row_1_reg_1355 <= a_0_Dout_A;
                b_copy_3_3_19_reg_1360 <= a_1_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1254 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                a_row_2_reg_1381 <= a_0_Dout_A;
                b_copy_2_3_11_fu_136 <= b_copy_2_3_18_fu_540_p3;
                b_copy_2_3_12_fu_144 <= b_copy_2_3_16_fu_526_p3;
                b_copy_2_3_1_fu_148 <= b_copy_2_3_3_fu_519_p3;
                b_copy_2_3_8_fu_140 <= b_copy_2_3_17_fu_533_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1254 <= exitcond_flatten_reg_1254;
                ap_pipeline_reg_pp0_iter1_i_cast1_mid2_v_reg_1273 <= i_cast1_mid2_v_reg_1273;
                ap_pipeline_reg_pp0_iter1_j_mid2_reg_1263 <= j_mid2_reg_1263;
                ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1254 <= ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1254;
                ap_pipeline_reg_pp0_iter2_j_mid2_reg_1263 <= ap_pipeline_reg_pp0_iter1_j_mid2_reg_1263;
                exitcond_flatten_reg_1254 <= exitcond_flatten_fu_281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1254 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5))) then
                b_copy_0_3_11_fu_104 <= b_copy_0_3_18_fu_892_p3;
                b_copy_0_3_12_fu_112 <= b_copy_0_3_16_fu_878_p3;
                b_copy_0_3_1_fu_116 <= b_copy_0_3_3_fu_871_p3;
                b_copy_0_3_8_fu_108 <= b_copy_0_3_17_fu_885_p3;
                j_1_reg_1470 <= j_1_fu_916_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1254 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then
                b_copy_1_3_11_fu_120 <= b_copy_1_3_18_fu_1037_p3;
                b_copy_1_3_12_fu_128 <= b_copy_1_3_16_fu_1023_p3;
                b_copy_1_3_1_fu_132 <= b_copy_1_3_3_fu_1016_p3;
                b_copy_1_3_8_fu_124 <= b_copy_1_3_17_fu_1030_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_281_p2 = ap_const_lv1_0))) then
                i_cast1_mid2_v_reg_1273 <= i_cast1_mid2_v_fu_313_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                indvar_flatten_next_reg_1258 <= indvar_flatten_next_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_fu_281_p2 = ap_const_lv1_0))) then
                j_mid2_reg_1263 <= j_mid2_fu_305_p3;
                    tmp_7_reg_1279(4 downto 2) <= tmp_7_fu_321_p3(4 downto 2);
                tmp_mid2_reg_1291 <= tmp_mid2_fu_346_p3;
                tmp_reg_1316 <= tmp_fu_359_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1254 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                sel_tmp2_reg_1396 <= sel_tmp2_fu_441_p2;
                sel_tmp4_reg_1409 <= sel_tmp4_fu_446_p2;
                sel_tmp_reg_1386 <= sel_tmp_fu_436_p2;
                tmp_3_reg_1373 <= tmp_3_fu_431_p2;
                tmp_5_reg_1425 <= tmp_5_fu_547_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1254 = ap_const_lv1_0))) then
                tmp_2_3_reg_1505 <= tmp_2_3_fu_1106_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1254 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5))) then
                tmp_2_reg_1465 <= tmp_2_fu_899_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1254 = ap_const_lv1_0))) then
                tmp_4_reg_1475 <= tmp_4_fu_1048_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1254 = ap_const_lv1_0))) then
                tmp_9_1_reg_1500 <= grp_fu_1094_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1254 = ap_const_lv1_0))) then
                tmp_9_2_reg_1485 <= grp_fu_724_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4) and (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1254 = ap_const_lv1_0))) then
                tmp_9_3_reg_1490 <= grp_fu_912_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5) and (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1254 = ap_const_lv1_0))) then
                tmp_9_reg_1495 <= grp_fu_1044_p2;
            end if;
        end if;
    end process;
    tmp_7_reg_1279(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_281_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((exitcond_flatten_fu_281_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
            when ap_ST_fsm_pp0_stage2 => 
                if (not(((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
            when ap_ST_fsm_pp0_stage4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
            when ap_ST_fsm_pp0_stage5 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    a_0_Addr_A <= std_logic_vector(shift_left(unsigned(a_0_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_0_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, tmp_8_fu_329_p1, tmp_10_fu_368_p3, tmp_12_fu_396_p3, tmp_14_fu_422_p3, tmp_16_fu_604_p3, tmp_19_cast_fu_803_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) then 
                a_0_Addr_A_orig <= tmp_19_cast_fu_803_p1;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) then 
                a_0_Addr_A_orig <= tmp_16_fu_604_p3;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                a_0_Addr_A_orig <= tmp_14_fu_422_p3;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                a_0_Addr_A_orig <= tmp_12_fu_396_p3;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                a_0_Addr_A_orig <= tmp_10_fu_368_p3;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                a_0_Addr_A_orig <= tmp_8_fu_329_p1;
            else 
                a_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_0_Clk_A <= ap_clk;
    a_0_Din_A <= ap_const_lv32_0;

    a_0_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)))) then 
            a_0_EN_A <= ap_const_logic_1;
        else 
            a_0_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_0_Rst_A <= ap_rst;
    a_0_WEN_A <= ap_const_lv4_0;
    a_1_Addr_A <= std_logic_vector(shift_left(unsigned(a_1_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_1_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, j_cast_fu_354_p1, tmp_20_cast_fu_386_p1, tmp_21_cast_fu_1129_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            a_1_Addr_A_orig <= tmp_21_cast_fu_1129_p1;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1))) then 
            a_1_Addr_A_orig <= tmp_20_cast_fu_386_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            a_1_Addr_A_orig <= j_cast_fu_354_p1;
        else 
            a_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_1_Clk_A <= ap_clk;
    a_1_Din_A <= tmp_2_3_reg_1505;

    a_1_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            a_1_EN_A <= ap_const_logic_1;
        else 
            a_1_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_1_Rst_A <= ap_rst;

    a_1_WEN_A_assign_proc : process(ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1254, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1254 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            a_1_WEN_A <= ap_const_lv4_F;
        else 
            a_1_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    a_row_0_1_fu_631_p3 <= 
        a_row_0_reg_1337 when (tmp_3_reg_1373(0) = '1') else 
        a_row_0_2_fu_88;
    a_row_1_1_fu_625_p3 <= 
        a_row_1_reg_1355 when (tmp_3_reg_1373(0) = '1') else 
        a_row_1_2_fu_92;
    a_row_2_1_fu_619_p3 <= 
        a_row_2_reg_1381 when (tmp_3_reg_1373(0) = '1') else 
        a_row_2_2_fu_96;
    a_row_3_1_fu_612_p3 <= 
        a_0_Dout_A when (tmp_3_reg_1373(0) = '1') else 
        a_row_3_2_fu_100;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state17 <= ap_CS_fsm(7 downto 7);

    ap_done_assign_proc : process(ap_CS_fsm_state17)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_copy_0_3_14_fu_857_p3 <= 
        b_copy_0_3_8_fu_108 when (sel_tmp4_reg_1409(0) = '1') else 
        b_copy_0_3_9_fu_850_p3;
    b_copy_0_3_15_fu_864_p3 <= 
        a_0_Dout_A when (sel_tmp4_reg_1409(0) = '1') else 
        b_copy_0_3_11_fu_104;
    b_copy_0_3_16_fu_878_p3 <= 
        b_copy_0_3_7_fu_843_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_0_3_12_fu_112;
    b_copy_0_3_17_fu_885_p3 <= 
        b_copy_0_3_14_fu_857_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_0_3_8_fu_108;
    b_copy_0_3_18_fu_892_p3 <= 
        b_copy_0_3_15_fu_864_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_0_3_11_fu_104;
    b_copy_0_3_2_fu_822_p3 <= 
        b_copy_0_3_1_fu_116 when (sel_tmp4_reg_1409(0) = '1') else 
        b_copy_0_3_4_fu_815_p3;
    b_copy_0_3_3_fu_871_p3 <= 
        b_copy_0_3_2_fu_822_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_0_3_1_fu_116;
    b_copy_0_3_4_fu_815_p3 <= 
        b_copy_0_3_1_fu_116 when (sel_tmp2_reg_1396(0) = '1') else 
        b_copy_0_3_fu_808_p3;
    b_copy_0_3_5_fu_829_p3 <= 
        a_0_Dout_A when (sel_tmp_reg_1386(0) = '1') else 
        b_copy_0_3_12_fu_112;
    b_copy_0_3_6_fu_836_p3 <= 
        b_copy_0_3_12_fu_112 when (sel_tmp2_reg_1396(0) = '1') else 
        b_copy_0_3_5_fu_829_p3;
    b_copy_0_3_7_fu_843_p3 <= 
        b_copy_0_3_12_fu_112 when (sel_tmp4_reg_1409(0) = '1') else 
        b_copy_0_3_6_fu_836_p3;
    b_copy_0_3_9_fu_850_p3 <= 
        a_0_Dout_A when (sel_tmp2_reg_1396(0) = '1') else 
        b_copy_0_3_8_fu_108;
    b_copy_0_3_fu_808_p3 <= 
        b_copy_0_3_1_fu_116 when (sel_tmp_reg_1386(0) = '1') else 
        a_0_Dout_A;
    b_copy_1_3_14_fu_1002_p3 <= 
        b_copy_1_3_8_fu_124 when (sel_tmp4_reg_1409(0) = '1') else 
        b_copy_1_3_9_fu_995_p3;
    b_copy_1_3_15_fu_1009_p3 <= 
        a_0_Dout_A when (sel_tmp4_reg_1409(0) = '1') else 
        b_copy_1_3_11_fu_120;
    b_copy_1_3_16_fu_1023_p3 <= 
        b_copy_1_3_7_fu_988_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_1_3_12_fu_128;
    b_copy_1_3_17_fu_1030_p3 <= 
        b_copy_1_3_14_fu_1002_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_1_3_8_fu_124;
    b_copy_1_3_18_fu_1037_p3 <= 
        b_copy_1_3_15_fu_1009_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_1_3_11_fu_120;
    b_copy_1_3_2_fu_967_p3 <= 
        b_copy_1_3_1_fu_132 when (sel_tmp4_reg_1409(0) = '1') else 
        b_copy_1_3_4_fu_960_p3;
    b_copy_1_3_3_fu_1016_p3 <= 
        b_copy_1_3_2_fu_967_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_1_3_1_fu_132;
    b_copy_1_3_4_fu_960_p3 <= 
        b_copy_1_3_1_fu_132 when (sel_tmp2_reg_1396(0) = '1') else 
        b_copy_1_3_fu_953_p3;
    b_copy_1_3_5_fu_974_p3 <= 
        a_0_Dout_A when (sel_tmp_reg_1386(0) = '1') else 
        b_copy_1_3_12_fu_128;
    b_copy_1_3_6_fu_981_p3 <= 
        b_copy_1_3_12_fu_128 when (sel_tmp2_reg_1396(0) = '1') else 
        b_copy_1_3_5_fu_974_p3;
    b_copy_1_3_7_fu_988_p3 <= 
        b_copy_1_3_12_fu_128 when (sel_tmp4_reg_1409(0) = '1') else 
        b_copy_1_3_6_fu_981_p3;
    b_copy_1_3_9_fu_995_p3 <= 
        a_0_Dout_A when (sel_tmp2_reg_1396(0) = '1') else 
        b_copy_1_3_8_fu_124;
    b_copy_1_3_fu_953_p3 <= 
        b_copy_1_3_1_fu_132 when (sel_tmp_reg_1386(0) = '1') else 
        a_0_Dout_A;
    b_copy_2_3_14_fu_504_p3 <= 
        b_copy_2_3_8_fu_140 when (sel_tmp4_fu_446_p2(0) = '1') else 
        b_copy_2_3_9_fu_497_p3;
    b_copy_2_3_15_fu_512_p3 <= 
        b_copy_2_3_19_reg_1342 when (sel_tmp4_fu_446_p2(0) = '1') else 
        b_copy_2_3_11_fu_136;
    b_copy_2_3_16_fu_526_p3 <= 
        b_copy_2_3_7_fu_489_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_2_3_12_fu_144;
    b_copy_2_3_17_fu_533_p3 <= 
        b_copy_2_3_14_fu_504_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_2_3_8_fu_140;
    b_copy_2_3_18_fu_540_p3 <= 
        b_copy_2_3_15_fu_512_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_2_3_11_fu_136;
    b_copy_2_3_2_fu_466_p3 <= 
        b_copy_2_3_1_fu_148 when (sel_tmp4_fu_446_p2(0) = '1') else 
        b_copy_2_3_4_fu_458_p3;
    b_copy_2_3_3_fu_519_p3 <= 
        b_copy_2_3_2_fu_466_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_2_3_1_fu_148;
    b_copy_2_3_4_fu_458_p3 <= 
        b_copy_2_3_1_fu_148 when (sel_tmp2_fu_441_p2(0) = '1') else 
        b_copy_2_3_fu_451_p3;
    b_copy_2_3_5_fu_474_p3 <= 
        b_copy_2_3_19_reg_1342 when (sel_tmp_fu_436_p2(0) = '1') else 
        b_copy_2_3_12_fu_144;
    b_copy_2_3_6_fu_481_p3 <= 
        b_copy_2_3_12_fu_144 when (sel_tmp2_fu_441_p2(0) = '1') else 
        b_copy_2_3_5_fu_474_p3;
    b_copy_2_3_7_fu_489_p3 <= 
        b_copy_2_3_12_fu_144 when (sel_tmp4_fu_446_p2(0) = '1') else 
        b_copy_2_3_6_fu_481_p3;
    b_copy_2_3_9_fu_497_p3 <= 
        b_copy_2_3_19_reg_1342 when (sel_tmp2_fu_441_p2(0) = '1') else 
        b_copy_2_3_8_fu_140;
    b_copy_2_3_fu_451_p3 <= 
        b_copy_2_3_1_fu_148 when (sel_tmp_fu_436_p2(0) = '1') else 
        b_copy_2_3_19_reg_1342;
    b_copy_3_3_14_fu_683_p3 <= 
        b_copy_3_3_8_fu_156 when (sel_tmp4_reg_1409(0) = '1') else 
        b_copy_3_3_9_fu_677_p3;
    b_copy_3_3_15_fu_690_p3 <= 
        b_copy_3_3_19_reg_1360 when (sel_tmp4_reg_1409(0) = '1') else 
        b_copy_3_3_11_fu_152;
    b_copy_3_3_16_fu_703_p3 <= 
        b_copy_3_3_7_fu_670_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_3_3_12_fu_160;
    b_copy_3_3_17_fu_710_p3 <= 
        b_copy_3_3_14_fu_683_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_3_3_8_fu_156;
    b_copy_3_3_18_fu_717_p3 <= 
        b_copy_3_3_15_fu_690_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_3_3_11_fu_152;
    b_copy_3_3_2_fu_650_p3 <= 
        b_copy_3_3_1_fu_164 when (sel_tmp4_reg_1409(0) = '1') else 
        b_copy_3_3_4_fu_643_p3;
    b_copy_3_3_3_fu_696_p3 <= 
        b_copy_3_3_2_fu_650_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_3_3_1_fu_164;
    b_copy_3_3_4_fu_643_p3 <= 
        b_copy_3_3_1_fu_164 when (sel_tmp2_reg_1396(0) = '1') else 
        b_copy_3_3_fu_637_p3;
    b_copy_3_3_5_fu_657_p3 <= 
        b_copy_3_3_19_reg_1360 when (sel_tmp_reg_1386(0) = '1') else 
        b_copy_3_3_12_fu_160;
    b_copy_3_3_6_fu_663_p3 <= 
        b_copy_3_3_12_fu_160 when (sel_tmp2_reg_1396(0) = '1') else 
        b_copy_3_3_5_fu_657_p3;
    b_copy_3_3_7_fu_670_p3 <= 
        b_copy_3_3_12_fu_160 when (sel_tmp4_reg_1409(0) = '1') else 
        b_copy_3_3_6_fu_663_p3;
    b_copy_3_3_9_fu_677_p3 <= 
        b_copy_3_3_19_reg_1360 when (sel_tmp2_reg_1396(0) = '1') else 
        b_copy_3_3_8_fu_156;
    b_copy_3_3_fu_637_p3 <= 
        b_copy_3_3_1_fu_164 when (sel_tmp_reg_1386(0) = '1') else 
        b_copy_3_3_19_reg_1360;
    exitcond_flatten_fu_281_p2 <= "1" when (indvar_flatten_phi_fu_252_p4 = ap_const_lv5_10) else "0";
    exitcond_fu_299_p2 <= "1" when (j_phi_fu_274_p4 = ap_const_lv3_4) else "0";
    grp_fu_1088_p0 <= (ap_const_lv1_1 & ap_pipeline_reg_pp0_iter1_i_cast1_mid2_v_reg_1273);
    grp_fu_724_p0 <= 
        a_row_2_reg_1381 when (tmp_3_reg_1373(0) = '1') else 
        a_row_2_2_fu_96;
    i_1_fu_293_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(i_phi_fu_263_p4));
    i_cast1_mid2_v_fu_313_p3 <= 
        i_1_fu_293_p2 when (exitcond_fu_299_p2(0) = '1') else 
        i_phi_fu_263_p4;

    i_phi_fu_263_p4_assign_proc : process(i_reg_259, exitcond_flatten_reg_1254, ap_CS_fsm_pp0_stage0, i_cast1_mid2_v_reg_1273, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1254 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            i_phi_fu_263_p4 <= i_cast1_mid2_v_reg_1273;
        else 
            i_phi_fu_263_p4 <= i_reg_259;
        end if; 
    end process;

    indvar_flatten_next_fu_287_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_252_p4) + unsigned(ap_const_lv5_1));

    indvar_flatten_phi_fu_252_p4_assign_proc : process(indvar_flatten_reg_248, exitcond_flatten_reg_1254, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_1258, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1254 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            indvar_flatten_phi_fu_252_p4 <= indvar_flatten_next_reg_1258;
        else 
            indvar_flatten_phi_fu_252_p4 <= indvar_flatten_reg_248;
        end if; 
    end process;

    j_1_fu_916_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(j_mid2_reg_1263));
    j_cast_cast5_fu_377_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1263),4));
    j_cast_cast6_fu_1120_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp0_iter2_j_mid2_reg_1263),6));
    j_cast_cast_fu_794_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1263),5));
    j_cast_fu_354_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_305_p3),32));
    j_mid2_fu_305_p3 <= 
        ap_const_lv3_0 when (exitcond_fu_299_p2(0) = '1') else 
        j_phi_fu_274_p4;

    j_phi_fu_274_p4_assign_proc : process(j_reg_270, exitcond_flatten_reg_1254, ap_CS_fsm_pp0_stage0, j_1_reg_1470, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1254 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            j_phi_fu_274_p4 <= j_1_reg_1470;
        else 
            j_phi_fu_274_p4 <= j_reg_270;
        end if; 
    end process;

    sel_tmp2_fu_441_p2 <= "1" when (tmp_reg_1316 = ap_const_lv2_1) else "0";
    sel_tmp4_fu_446_p2 <= "1" when (tmp_reg_1316 = ap_const_lv2_0) else "0";
    sel_tmp_fu_436_p2 <= "1" when (tmp_reg_1316 = ap_const_lv2_2) else "0";
    tmp1_fu_340_p2 <= "1" when (i_phi_fu_263_p4 = ap_const_lv3_0) else "0";
    tmp7_fu_1098_p2 <= std_logic_vector(unsigned(tmp_9_reg_1495) + unsigned(tmp_9_1_reg_1500));
    tmp8_fu_1102_p2 <= std_logic_vector(unsigned(tmp_9_3_reg_1490) + unsigned(tmp_9_2_reg_1485));
    tmp_10_fu_368_p3 <= (ap_const_lv27_0 & tmp_s_fu_363_p2);
    tmp_11_fu_391_p2 <= (tmp_7_reg_1279 or ap_const_lv5_2);
    tmp_12_fu_396_p3 <= (ap_const_lv27_0 & tmp_11_fu_391_p2);
    tmp_13_fu_417_p2 <= (tmp_7_reg_1279 or ap_const_lv5_3);
    tmp_14_fu_422_p3 <= (ap_const_lv27_0 & tmp_13_fu_417_p2);
    tmp_15_fu_1112_p3 <= (grp_fu_1088_p2 & ap_const_lv2_0);
    tmp_16_fu_604_p3 <= (ap_const_lv29_2 & j_mid2_reg_1263);
    tmp_17_fu_797_p2 <= std_logic_vector(signed(ap_const_lv5_14) + signed(j_cast_cast_fu_794_p1));
    tmp_18_fu_380_p2 <= std_logic_vector(unsigned(ap_const_lv4_4) + unsigned(j_cast_cast5_fu_377_p1));
    tmp_19_cast_fu_803_p1 <= std_logic_vector(resize(unsigned(tmp_17_fu_797_p2),32));
    tmp_19_fu_1123_p2 <= std_logic_vector(unsigned(tmp_15_fu_1112_p3) + unsigned(j_cast_cast6_fu_1120_p1));
    tmp_20_cast_fu_386_p1 <= std_logic_vector(resize(unsigned(tmp_18_fu_380_p2),32));
    tmp_21_cast_fu_1129_p1 <= std_logic_vector(resize(unsigned(tmp_19_fu_1123_p2),32));
    tmp_2_3_fu_1106_p2 <= std_logic_vector(unsigned(tmp7_fu_1098_p2) + unsigned(tmp8_fu_1102_p2));
    tmp_2_fu_899_p1 <= 
        b_copy_0_3_15_fu_864_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_0_3_11_fu_104;
    tmp_2_fu_899_p2 <= 
        b_copy_0_3_14_fu_857_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_0_3_8_fu_108;
    tmp_2_fu_899_p3 <= 
        b_copy_0_3_7_fu_843_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_0_3_12_fu_112;
    tmp_2_fu_899_p4 <= 
        b_copy_0_3_2_fu_822_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_0_3_1_fu_116;
    tmp_3_fu_431_p2 <= "1" when (j_mid2_reg_1263 = ap_const_lv3_0) else "0";
    tmp_4_fu_1048_p1 <= 
        b_copy_1_3_15_fu_1009_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_1_3_11_fu_120;
    tmp_4_fu_1048_p2 <= 
        b_copy_1_3_14_fu_1002_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_1_3_8_fu_124;
    tmp_4_fu_1048_p3 <= 
        b_copy_1_3_7_fu_988_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_1_3_12_fu_128;
    tmp_4_fu_1048_p4 <= 
        b_copy_1_3_2_fu_967_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_1_3_1_fu_132;
    tmp_5_fu_547_p1 <= 
        b_copy_2_3_15_fu_512_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_2_3_11_fu_136;
    tmp_5_fu_547_p2 <= 
        b_copy_2_3_14_fu_504_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_2_3_8_fu_140;
    tmp_5_fu_547_p3 <= 
        b_copy_2_3_7_fu_489_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_2_3_12_fu_144;
    tmp_5_fu_547_p4 <= 
        b_copy_2_3_2_fu_466_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_2_3_1_fu_148;
    tmp_6_fu_729_p1 <= 
        b_copy_3_3_15_fu_690_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_3_3_11_fu_152;
    tmp_6_fu_729_p2 <= 
        b_copy_3_3_14_fu_683_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_3_3_8_fu_156;
    tmp_6_fu_729_p3 <= 
        b_copy_3_3_7_fu_670_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_3_3_12_fu_160;
    tmp_6_fu_729_p4 <= 
        b_copy_3_3_2_fu_650_p3 when (tmp_mid2_reg_1291(0) = '1') else 
        b_copy_3_3_1_fu_164;
    tmp_7_fu_321_p3 <= (i_cast1_mid2_v_fu_313_p3 & ap_const_lv2_0);
    tmp_8_fu_329_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_321_p3),32));
    tmp_fu_359_p1 <= j_mid2_fu_305_p3(2 - 1 downto 0);
    tmp_mid1_fu_334_p2 <= "1" when (i_1_fu_293_p2 = ap_const_lv3_0) else "0";
    tmp_mid2_fu_346_p3 <= 
        tmp_mid1_fu_334_p2 when (exitcond_fu_299_p2(0) = '1') else 
        tmp1_fu_340_p2;
    tmp_s_fu_363_p2 <= (tmp_7_reg_1279 or ap_const_lv5_1);
end behav;
