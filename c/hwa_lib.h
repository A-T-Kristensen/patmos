/*
 *	This header file contains the parameters used for 
 *  benchmarking the C programs on the Patmos CPU against
 *  the HwAs generated by Vivado HLS.
 *  It also contains some generic functions used by the
 *  C programs.
 *
 *	Author: Andreas T. Kristensen (s144026@student.dtu.dk)
 *  Copyright: DTU, BSD License
 */

/* TODO
 *
 *	Add functions to 
 * 		* Initialize matrices for matrix multiplication
 *		* Distribute data into memories.
 *		* Add functions timing, taking pointers to variables
 *        in the scope of the main function.
 */

#ifndef __HWA_LIB_H__
#define __HWA_LIB_H__

/*
 *	INCLUDED LIBRARIES
 */

#include <machine/spm.h> 	// Defines _SPM
#include <machine/patmos.h> // Defines _IODEV, used to access memory mapped IO devices.
#include <machine/rtc.h> 	// Gives us get_cpu_cycles

#include <stdio.h>
#include <stdlib.h> 

#include <math.h>

/*
 *	DEFINITIONS
 */

#define ADDR_BITS 			16

#define LED_RUN_LENGTH 		2000
#define LED_ROUNDS			10

#define CYCLE_CALIBRATION 	3

#define BRAM_BASE 			0xF00B0000
#define HWA_CTRL_BASE 		0xF00C0000
#define LED_BASE 			0xF0090000

/*
 *	HWA DEPENDENT DEFINITIONS AND TYPEDEFS
 *
 *	The followng definitions and typedefs are
 *	updated according to the current benchmark   
 */

#define DIM 				16
#define NBANKS 				3

typedef float mat_type;

/*
 *	FORWARD DECLARATIONS
 */

volatile _IODEV unsigned long** bank_ptrs(unsigned long nbanks);
void led_blink(int err_cnt);

/*
 *	FUNCTIONS
 */

/*
 *	NAME: bank_ptrs
 *
 *	PARAMETERS:
 *		* nbanks: The number of memory banks
 * 
 *	DESCRIPTION: bank_ptrs() generates an array of pointers to the bram blocks.
 *
 */


volatile _IODEV unsigned long** bank_ptrs(unsigned long nbanks) {

	int i;
	unsigned long bank_bits = (unsigned long) ceil(log2(nbanks));

	volatile _IODEV unsigned long** bank_ptr_array = (volatile _IODEV unsigned long**) malloc(bank_bits*sizeof(unsigned long*));

	for(i = 0; i < nbanks; i++) {
		bank_ptr_array[i] = (volatile _IODEV unsigned long *) ((i << (ADDR_BITS - bank_bits)) + BRAM_BASE);
	}

	return bank_ptr_array;
}

/*
 *	NAME: led_blink
 *
 *	PARAMETERS:
 *		* err_cnt: The number of errors in the calculations between
 *				   the HwA and the software.
 * 
 *	DESCRIPTION: led_blink() blinks the LEDs on the FPGA in
 *				 different patterns depending on whether the result is correct..
 *
 */

void led_blink(int err_cnt) {

	volatile _IODEV int *led_ptr  = (volatile _IODEV int *) LED_BASE;
	int i, j;

	if(!err_cnt) 
	{
		puts("Results correct");	

		for (i = 0; i < LED_ROUNDS; i++) 
		{
			for (i=LED_RUN_LENGTH; i!=0; --i)
				for (j=LED_RUN_LENGTH; j!=0; --j)
					*led_ptr = 3;

			for (i=LED_RUN_LENGTH; i!=0; --i)
				for (j=LED_RUN_LENGTH; j!=0; --j)
					*led_ptr = 0;
			
			for (i=LED_RUN_LENGTH; i!=0; --i)
				for (j=LED_RUN_LENGTH; j!=0; --j)
					*led_ptr = 15;

			for (i=LED_RUN_LENGTH; i!=0; --i)
				for (j=LED_RUN_LENGTH; j!=0; --j)
					*led_ptr = 0;
			
			for (i=LED_RUN_LENGTH; i!=0; --i)
				for (j=LED_RUN_LENGTH; j!=0; --j)
					*led_ptr = 63;

			for (i=LED_RUN_LENGTH; i!=0; --i)
				for (j=LED_RUN_LENGTH; j!=0; --j)
					*led_ptr = 0;			
		}		
	} 

	else 
	{
		puts("Results incorrect"); 

		for (i = 0; i < LED_ROUNDS; i++) 
		{
			for (i=LED_RUN_LENGTH; i!=0; --i)
				for (j=LED_RUN_LENGTH; j!=0; --j)
					*led_ptr = 0;
			
			for (i=LED_RUN_LENGTH; i!=0; --i)
				for (j=LED_RUN_LENGTH; j!=0; --j)
					*led_ptr = 7; 	
	  	}
	}
}

#endif /* __HWA_LIB_H__ */
